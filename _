def feature_engineer(dataset):


    #Reading original dataset
    df = pd.read_csv(dataset)

    #First/Last Review Date Features
    #extracting date from review columns
    df['First Review'] = df['Reviews'].str.extract(r'(\d{2}\/\d{2}\/\d{4}(?=\'\]))')
    df['Last Review'] = df['Reviews'].str.extract(r'(\d{2}\/\d{2}\/\d{4}(?!\'\]))')

    #converting to datetime
    df['First Review'] = pd.to_datetime(df['First Review'], format = "%m/%d/%Y")
    df['Last Review'] = pd.to_datetime(df['Last Review'], format = "%m/%d/%Y")
    df['First Review'] = df['First Review'].fillna(999)
    df['Last Review'] = df['Last Review'].fillna(999)
    
    #converting to UNIX time for model properly working
    df['Last Review'] = df['Last Review'].apply(lambda x: time.mktime(x.timetuple())/24/60/60 if x!=999 else x).astype(float)
    df['First Review'] = df['First Review'].apply(lambda x: time.mktime(x.timetuple())/24/60/60 if x!=999 else x).astype(float)
    #filling missed values
    mean_first_rev = df['First Review'].mean()
    df['First Review'] = df['First Review'].apply(lambda x: mean_first_rev if x==999 else x)
    mean_last_rev = df['Last Review'].mean()
    df['Last Review'] = df['Last Review'].apply(lambda x: mean_last_rev if x==999 else x)

    #calculating time difference between first and last review, last review and today
    df['First to Last Review'] = df['Last Review'] - df['First Review']
    df['First to Last Review'] = df['First to Last Review'].apply(lambda x: -x if x<0 else x).astype(int)
    df['Last Review to Today'] = (time.mktime(datetime.today().timetuple())/24/60/60 - df['Last Review']).astype(int)

    #Is the restaurant located in the capital?
    df['Capital'] = df['City'] 
    df['Capital'] = df['Capital'].apply(lambda x: 1 if x in capitals else 0)
    
    #city's population
    #df['Population'] = df['City'].apply(lambda x: population[x])

    #Is a given review positive?
    df['Reviews'] = df['Reviews'].astype(str)
    df['Reviews'] = df['Reviews'].str.split(pat = "],", expand=True)[0]
    df['Reviews'] = df['Reviews'].str.replace("'","")
    df['Reviews'] = df['Reviews'].str.replace(r'(\[\[)','')
    df['Reviews'] = df['Reviews'].str.replace(',','')
    df['Positive Feedback'] = df['Reviews'].apply(lambda x: 1 if any(word in x.lower() for word in positive) else 0)
    df['Negative Feedback'] = df['Reviews'].apply(lambda x: 1 if any(word in x.lower() for word in negative) else 0)
    #df['Neutral Feedback'] = df['Negative Feedback']+df['Positive Feedback']
    #df['Neutral Feedback'] = df['Neutral Feedback'].apply(lambda x: 1 if x==0 else 0)
    
    #Number of Cusine Styles in the restaurant
    df['Cuisine Style'] = df['Cuisine Style'].astype(str)
    df['Cuisine Style'] = df['Cuisine Style'].apply(lambda x: x[1:-1] if x != "nan" else x)
    df['Number of Cusine Styles'] = df['Cuisine Style'].str.count(",") + 1
    #It the cusine style in the restaurant popular?
    popular_cusine = df['Cuisine Style'].str.split(pat = ",", expand=True).stack().value_counts().index[0:20]
    df['Popular Cusine'] = df['Cuisine Style'].apply(lambda x: 1 if any(word in x for word in popular_cusine) and x!= 'nan' else 0)

    #Decoding Price Range categorical feature
    df['Price Range'] = df['Price Range'].str.replace(r'((?<!\$)\$(?!\$))',"1")
    df['Price Range'] = df['Price Range'].str.replace(r'(\${2} - \${3})',"2")
    df['Price Range'] = df['Price Range'].str.replace(r'(\${4})',"3")
    #because $$-$$$ is the most popular price range let's change missed values on '2'
    df['Price Range'] = df['Price Range'].fillna(2) 

    #Filling missed 'Number of Reviews' with 0 because it's more likely no reviews were given
    df['Number of Reviews'] = df['Number of Reviews'].fillna(0)
    #df['Number of Reviews'] = df['Number of Reviews'].apply(lambda x: 1 if x<=10 else x)
    #df['Number of Reviews'] = df['Number of Reviews'].apply(lambda x: 2 if 10<x<=30 else x)
    #df['Number of Reviews'] = df['Number of Reviews'].apply(lambda x: 3 if 30<x<=100 else x)
    #df['Number of Reviews'] = df['Number of Reviews'].apply(lambda x: 4 if x>100 else x)



    
    #getting dummy variables for cities
    df = pd.concat([df, pd.get_dummies(df['City'])], axis=1)
    
    #df['IndexX'] = df['Number of Reviews']/df['Population']

    max_ranking = pd.DataFrame(df.groupby(['City'])['Ranking'].max()).reset_index()
    def coeff(row):
        row['RR'] = max_ranking[max_ranking['City'] == row['City']].iloc[0,1]/row['Ranking']
        return row['RR']
    
    #df['RR'] = df['City']
    #df['RR'] = df.apply(coeff, axis = 1)
    #df['RR'] = df['RR'].apply(lambda x: 1 if x<=1 else x)
    #df['RR'] = df['RR'].apply(lambda x: 2 if 1<x<=2 else x)
    #df['RR'] = df['RR'].apply(lambda x: 3 if 2<x<=3 else x)
    #df['RR'] = df['RR'].apply(lambda x: 4 if x>3 else x)
    
    #big city
    #df['big city'] = df['City'] 
    #df['big city'] = df['big city'].apply(lambda x: 1 if x in (data['City'].value_counts()[0:10].index) else 0) 

    #deleting unimportant features
    df.drop(['Reviews','URL_TA',  'Restaurant_id', 'ID_TA',  'City', 'Cuisine Style'], axis=1, inplace=True)
    
    
    return df
    
